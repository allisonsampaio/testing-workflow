name: Auto PR from develop to main

on:
  push:
    branches:
      - develop

jobs:
  create-or-update-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Install GitHub CLI
        uses: dev-hanz-ops/install-gh-cli-action@v0.1.0
        with:
          gh-cli-version: 2.32.0

      - name: Authenticate GitHub CLI
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Check for existing PR
        id: check_pr
        run: |
          PR=$(gh pr list --base main --head develop --state open --json number --jq ".[] | .number")
          echo "::set-output name=pr_number::$PR"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create PR if not exists
        if: steps.check_pr.outputs.pr_number == ''
        run: |
          gh pr create --base main --head develop --title "Automated PR from develop to main" --body "This is an automated PR from develop to main."
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update existing PR
        if: steps.check_pr.outputs.pr_number != ''
        run: |
          PR_NUMBER=${{ steps.check_pr.outputs.pr_number }}
          gh pr comment $PR_NUMBER --body 'Updated with latest changes from develop'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get commit authors from develop
        id: get_commit_authors
        run: |
          # Fetch the latest changes from the remote repository
          git fetch origin

          # Get the base commit hash where `develop` branched off from `main`
          base_commit=$(git merge-base origin/main origin/develop)

          # Debug: Output the base commit hash
          echo "Base commit: $base_commit"

          # Ensure the `base_commit` is not empty
          if [ -z "$base_commit" ]; then
            echo "Base commit not found. Ensure the `develop` branch has been created from `main`."
            exit 1
          fi

          # List commits from the base commit to the latest commit on `develop`
          commit_range=$(git log --format='%H' $base_commit..origin/develop)

          # Debug: Output the commit range
          echo "Commit range: $commit_range"

          # Check if `commit_range` is not empty
          if [ -z "$commit_range" ]; then
            echo "No commits found in the range. Ensure there are new commits on `develop`."
            exit 1
          fi

          # Get the authors of these commits
          authors=$(git log --format='%aN' $commit_range | sort -u)

          # Debug: Output the authors list
          echo "Authors: $authors"

          # Convert to a comma-separated list
          authors_list=$(echo "$authors" | tr '\n' ',' | sed 's/,$//')

          # Output the authors list
          echo "::set-output name=authors::$authors_list"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Add reviewers to PR
        if: steps.check_pr.outputs.pr_number != ''
        run: |
          PR_NUMBER=${{ steps.check_pr.outputs.pr_number }}
          AUTHORS=${{ steps.get_commit_authors.outputs.authors }}
          # Add reviewers to the PR
          gh pr edit $PR_NUMBER --add-reviewer $AUTHORS
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
